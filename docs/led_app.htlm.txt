<!doctype html>
<html lang="pt-br">
<head>
  <meta charset="utf-8" />
  <title>ICW — Controle do LED</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <!-- MQTT.js via CDN -->
  <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
  <style>
    body { font-family: system-ui, Arial; margin: 24px; }
    .card { border:1px solid #ddd; border-radius:12px; padding:16px; max-width:520px; }
    .row { display:flex; gap:8px; align-items:center; margin:8px 0 }
    .ok { color:#0a0 }
    .bad { color:#a00 }
    code { background:#f6f6f6; padding:2px 6px; border-radius:6px }
  </style>
</head>
<body>
  <h2>ICW — Controle do LED (Web)</h2>
  <div class="card">
    <div class="row">
      <label>Estado da conexão:</label>
      <span id="conn" class="bad">desconectado</span>
    </div>
    <div class="row">
      <button id="btnConnect">Conectar</button>
      <button id="btnDisconnect">Desconectar</button>
    </div>
    <hr/>
    <div class="row">
      <label>LED atual (reportado):</label>
      <strong id="ledState">?</strong>
    </div>
    <div class="row">
      <button id="btnOn">Ligar LED</button>
      <button id="btnOff">Desligar LED</button>
    </div>
    <p style="font-size:12px;color:#555">Tópicos:
      <br/>cmd: <code id="tCmd"></code>
      <br/>reported: <code id="tRep"></code>
    </p>
  </div>

<script>
  // ======= CONFIG — ajuste para o seu ambiente =======
  const ORG_ID    = "app-user-org01";
  const DEVICE_ID = "device-dev01";

  const BROKER_WSS = "wss://x82148af.ala.us-east-1.emqxsl.com:8084/mqtt";
  const APP_USER   = "app-web";      // crie este usuário no EMQX
  const APP_PASS   = "1234"; // e dê ACLs de pub/sub

  const TOPIC_CMD = `org/${ORG_ID}/devices/${DEVICE_ID}/cmd`;
  const TOPIC_REP = `org/${ORG_ID}/devices/${DEVICE_ID}/state/reported`;

  document.getElementById('tCmd').textContent = TOPIC_CMD;
  document.getElementById('tRep').textContent = TOPIC_REP;

  let client = null;
  const $conn = document.getElementById('conn');
  const $led  = document.getElementById('ledState');

  function setConn(ok){
    $conn.textContent = ok ? 'conectado' : 'desconectado';
    $conn.className   = ok ? 'ok' : 'bad';
  }

  function connect(){
    if (client && client.connected) return;
    const cid = 'web-' + Math.random().toString(16).slice(2);
    client = mqtt.connect(BROKER_WSS, {
      clientId: cid,
      username: APP_USER,
      password: APP_PASS,
      keepalive: 60,
      clean: true,
      reconnectPeriod: 2000,
      connectTimeout: 8000,
      protocolVersion: 4
    });

    client.on('connect', () => {
      setConn(true);
      client.subscribe(TOPIC_REP, { qos: 1 }, (err) => {
        if (err) console.error('SUB erro:', err);
      });
      // pede um publish inicial (se seu firmware publicar periodicamente, logo chega)
    });

    client.on('reconnect', () => setConn(false));
    client.on('close', () => setConn(false));
    client.on('error', (e) => console.error('MQTT error', e));

    client.on('message', (topic, payload) => {
      if (topic === TOPIC_REP) {
        try {
          const json = JSON.parse(payload.toString());
          const ledOn = json?.hw?.led_on;
          if (typeof ledOn === 'boolean') {
            $led.textContent = ledOn ? 'ON' : 'OFF';
          }
        } catch(e){ console.warn('JSON inválido', e); }
      }
    });
  }

  function disconnect(){
    if (client) {
      const c = client;
      client = null;
      c.end(true);
    }
    setConn(false);
  }

  function publishCmd(on){
    if (!client || !client.connected) { alert('Conecte primeiro'); return; }
    const msg = {
      msgId: 'led-' + Date.now(),
      op: 'led',
      data: { on }
    };
    client.publish(TOPIC_CMD, JSON.stringify(msg), { qos: 1, retain: false });
  }

  document.getElementById('btnConnect').onclick = connect;
  document.getElementById('btnDisconnect').onclick = disconnect;
  document.getElementById('btnOn').onclick  = () => publishCmd(true);
  document.getElementById('btnOff').onclick = () => publishCmd(false);
</script>
</body>
</html>
